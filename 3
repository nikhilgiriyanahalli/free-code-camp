import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Import the data from medical_examination.csv and assign it to the df variable
df = pd.read_csv('medical_examination.csv')

# Create the overweight column in the df variable
df['overweight'] = (df['weight'] / (df['height'] / 100) ** 2).apply(lambda x: 1 if x > 25 else 0)

# Normalize data by making 0 always good and 1 always bad
df['cholesterol'] = df['cholesterol'].apply(lambda x: 0 if x == 1 else 1)
df['gluc'] = df['gluc'].apply(lambda x: 0 if x == 1 else 1)

# Draw the Categorical Plot in the draw_cat_plot function
def draw_cat_plot():
    # Create a DataFrame for the cat plot using pd.melt with values from cholesterol, gluc, smoke, alco, active, and overweight in the df_cat variable
    df_cat = pd.melt(df, id_vars='cardio', value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'])
    
    # Group and reformat the data in df_cat to split it by cardio. Show the counts of each feature.
    df_cat = df_cat.groupby(['cardio', 'variable', 'value']).size().reset_index(name='total')
    
    # Rename one of the columns for the catplot to work correctly
    df_cat['variable'] = df_cat['variable'].map({'cholesterol': 'Cholesterol', 'gluc': 'Glucose', 'smoke': 'Smoking', 'alco': 'Alcohol', 'active': 'Physical Activity', 'overweight': 'Overweight'})
    
    # Convert the data into long format and create a chart that shows the value counts of the categorical features using sns.catplot()
    fig = sns.catplot(data=df_cat, x='variable', y='total', hue='value', col='cardio', kind='bar').fig
    
    # Get the figure for the output and store it in the fig variable
    return fig


# Draw the Heat Map in the draw_heat_map function
def draw_heat_map():
    # Clean the data in the df_heat variable by filtering out the incorrect data segments
    df_heat = df[(df['height'] >= df['height'].quantile(0.025)) & 
                 (df['height'] <= df['height'].quantile(0.975)) & 
                 (df['weight'] >= df['weight'].quantile(0.025)) & 
                 (df['weight'] <= df['weight'].quantile(0.975)) & 
                 (df['ap_lo'] <= df['ap_hi'])]
    
    # Calculate the correlation matrix and store it in the corr variable
    corr = df_heat.corr()
    
    # Generate a mask for the upper triangle
    mask = np.triu(np.ones_like(corr, dtype=bool))
    
    # Set up the matplotlib figure
    plt.figure(figsize=(12, 10))
    
    # Plot the correlation matrix using sns.heatmap()
    sns.heatmap(corr, mask=mask, annot=True, fmt='.1f', cmap='coolwarm', vmin=-0.1, vmax=0.25)
    
    # Do not modify the next two lines
    fig = plt.gcf()
    return fig
